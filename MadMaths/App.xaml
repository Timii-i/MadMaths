<Application x:Class="MadMaths.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:MadMaths"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <Style TargetType="{x:Type Page}">
            <Setter Property="FontFamily" Value="Microsoft Sans Serif" />
            <Setter Property="FontSize" Value="15"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect ShadowDepth="5" Direction="315" Color="Gray" Opacity="0.20" BlurRadius="10.5"/>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type PasswordBox}">
            <Setter Property="Foreground" Value="#FF2B2B2B"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect ShadowDepth="5" Direction="315" Color="Gray" Opacity="0.20" BlurRadius="10.5"/>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="FontFamily" Value="Microsoft Sans Serif" />
            <Setter Property="FontSize" Value="15"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect ShadowDepth="5" Direction="315" Color="Gray" Opacity="0.20" BlurRadius="10.5"/>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- Style für die Buttons -->
        <Style TargetType="{x:Type Button}">
            <Setter Property="FontSize" Value="28"/>
            <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
            <Setter Property="MinHeight" Value="70"/>
            <Setter Property="Height" Value="auto"/>
            <Setter Property="Foreground" Value="Beige"/>
            <Setter Property="Control.Effect">
                <Setter.Value>
                    <DropShadowEffect ShadowDepth="6" Direction="315" Color="Gray" Opacity="0.35" BlurRadius="10.5"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <!--überschreibe das Standard ControlTemplate, um MouseOver Effekt nutzen zu können-->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="#FF212121" BorderThickness="0" CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" 
                                              TextOptions.TextFormattingMode="Display" TextOptions.TextRenderingMode="Grayscale"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Control.Background">
                <!-- Standard Background -->
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,2">
                        <GradientStop Offset="0.0" Color="Orange"/>
                        <GradientStop Offset="0.5" Color="DarkOrange"/>
                        <GradientStop Offset="1.0" Color="OrangeRed"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Hover Effekt -->
                <Trigger Property="Button.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#ff7600"/>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Background" Value="#FFFF4B00"/>
                </Trigger>
                <Trigger Property="Button.IsEnabled" Value="False">
                    <Setter Property="Background" Value="DimGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
         <!--Style für challengeAuswahl Buttons 
        <Style x:Key="challengeButtons" TargetType="Button">
            <Setter Property="MaxHeight" Value="100"/>
            <Setter Property="MaxWidth" Value="300"/>

        </Style>-->
        
        <!-- Style für Letzte Aufgaben Button -->
        <Style x:Key="LetzteAufgabenButton" TargetType="Button">
            <Setter Property="FontSize" Value="28"/>
            <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
            <Setter Property="MinHeight" Value="70"/>
            <Setter Property="Height" Value="auto"/>
            <Setter Property="Foreground" Value="Beige"/>
            <Setter Property="Control.Effect">
                <Setter.Value>
                    <DropShadowEffect ShadowDepth="6" Direction="315" Color="Gray" Opacity="0.35" BlurRadius="10.5"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <!--überschreibe das Standard ControlTemplate, um MouseOver Effekt nutzen zu können-->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="#FF212121" BorderThickness="0" CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" 
                                              TextOptions.TextFormattingMode="Display" TextOptions.TextRenderingMode="Grayscale"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Control.Background">
                <!-- Standard Background -->
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,2">
                        <GradientStop Offset="0.0" Color="Orange"/>
                        <GradientStop Offset="0.5" Color="DarkOrange"/>
                        <GradientStop Offset="1.0" Color="OrangeRed"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Style für Letzte Aufgaben Panel Button -->
        <Style x:Key="LetzteAufgabenPanelButton" TargetType="Button">
            <Setter Property="FontSize" Value="28"/>
            <Setter Property="FontFamily" Value="Microsoft Sans Serif"/>
            <Setter Property="MinHeight" Value="70"/>
            <Setter Property="MinWidth" Value="180"/>
            <Setter Property="Margin" Value="10,0,10,0"/>
            <Setter Property="Foreground" Value="Beige"/>
            <Setter Property="Background" Value="#d57500"/>
            <Setter Property="Control.Effect">
                <Setter.Value>
                    <DropShadowEffect ShadowDepth="6" Direction="315" Color="Gray" Opacity="0.35" BlurRadius="10.5"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <!--überschreibe das Standard ControlTemplate, um MouseOver Effekt nutzen zu können-->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="#FF212121" BorderThickness="0" CornerRadius="1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" 
                                              TextOptions.TextFormattingMode="Display" TextOptions.TextRenderingMode="Grayscale"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Hover Effekt -->
                <Trigger Property="Button.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#e66b00"/>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Background" Value="#cc5f00"/>
                </Trigger>
                <Trigger Property="Button.IsEnabled" Value="False">
                    <Setter Property="Background" Value="DimGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Style für den MainBackground -->
        <Style TargetType="{x:Type Grid}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Color="#FF01C8FF" Offset="0.0"/>
                        <GradientStop Color="#FF648CFF" Offset="1.0"/>
                        <!--<GradientStop Color="#FF6464FF" Offset="1.0"/>-->
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter> 
        </Style>
        
        <!-- Style für CustomWindow Buttons -->
        <Style x:Key="WindowButton">
            <Setter Property="Control.Background" Value="DarkOrange"/>
            <Setter Property="Control.FontSize" Value="25"/>
            <Setter Property="Control.FontFamily" Value="Microsoft Sans Serif"/>
            <Setter Property="Control.MinHeight" Value="35"/>
            <Setter Property="Control.Height" Value="auto"/>
            <Setter Property="Control.Foreground" Value="White"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <!--überschreibe das Standard ControlTemplate, um MouseOver Effekt nutzen zu können-->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="#FF212121" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                                              TextOptions.TextRenderingMode="Grayscale"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Button.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#ff7600"/>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Control.Background" Value="#FFFF4B00"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Style für den Window Minimize Button -->
        <Style x:Key="WindowButtonMinimize" BasedOn="{StaticResource WindowButton}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <!-- Überschreibe das Standard Template, um das Aussehen zu ändern -->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border Background="{TemplateBinding Background}" BorderBrush="DarkOrange" BorderThickness="0">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <Image Source="assets/icons/WindowMinimize.png" Height="19" Width="19"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#ff7600"/>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Control.Background" Value="#FFFF4B00"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- Style für den Window Maximize Button -->
        <Style x:Key="WindowButtonMaximize" BasedOn="{StaticResource WindowButton}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <!-- Überschreibe das Standard Template, um das Aussehen zu ändern -->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border Background="{TemplateBinding Background}" BorderBrush="#FF212121" BorderThickness="0">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <Image Source="assets/icons/WindowMaximize.png" Height="15" Width="15"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#ff7600"/>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Control.Background" Value="#FFFF4B00"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Style für die Window Close Button -->
        <Style x:Key="WindowButtonClose" BasedOn="{StaticResource WindowButton}">
            <Setter Property="Control.FontFamily" Value="Lucida Sana Unicode"/>
            <Setter Property="Control.MinHeight" Value="0"/>
            <Setter Property="Control.Background" Value="Transparent"/>
            <Setter Property="Control.Foreground" Value="#ffa500"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="Transparent">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.Content>
                                        <TextBlock Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}"/>
                                    </ContentPresenter.Content>
                                </ContentPresenter>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Button.IsMouseOver" Value="True">
                    <Setter Property="Control.Foreground" Value="White"/>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Control.Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Style für den Back Button -->
        <Style x:Key="BackButton">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <!-- Überschreibe das Standard Template, um das Aussehen zu ändern -->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Image Source="assets/icons/backButton.png"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="Control.Effect">
                        <Setter.Value>
                            <DropShadowEffect ShadowDepth="6" Direction="315" Color="Gray" Opacity="0.35" BlurRadius="10.5"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Image Source="assets/icons/backButton_active.png"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- Style für den nächstes Thema Button -->
        <Style x:Key="NextExerciseButton" BasedOn="{StaticResource BackButton}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <!-- Überschreibe das Standard Template, um das Aussehen zu ändern -->
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Image Source="assets/icons/NextExerciseButton.png"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Image Source="assets/icons/NextExerciseButton_active.png"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Style für den neue Aufgabe Button -->
        <!--<Style x:Key="NewExerciseButton" BasedOn="{StaticResource BackButton}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    --><!-- Überschreibe das Standard Template, um das Aussehen zu ändern --><!--
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Image Source="assets/icons/NewExerciseButton.png"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Button.IsPressed" Value="True">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Image Source="assets/icons/NewExerciseButton_active.png"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>-->
        
        <!-- Style für die Ranking Liste -->     
        <Style TargetType="{x:Type ListBoxItem}">
            <Setter Property="Background" Value="#FF01C8FF"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Beige" BorderThickness="0" CornerRadius="15">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Margin" Value="2"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FF01C8FF"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect ShadowDepth="6" Direction="315" Color="Gray" Opacity="0.35" BlurRadius="10.5"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!--Ranglistenstyle für den ersten Platz-->
        <Style x:Key="RankingListStyle1" BasedOn="{StaticResource RankingListStyle}">
            <Setter Property="Control.Background" Value="Orange" />
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#FFFF8B00"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--Ranglistenstyle für den zweiten Platz-->
        <Style x:Key="RankingListStyle2" BasedOn="{StaticResource RankingListStyle}">
            <Setter Property="Control.Background" Value="#FFFDB83B" />
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#FFFF9F40"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!--Ranglistenstyle für den dritten Platz-->
        <Style x:Key="RankingListStyle3" BasedOn="{StaticResource RankingListStyle}">
            <Setter Property="Control.Background" Value="#FFFDC560" />
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="#FFFDBD4A"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Style für ProgressBar -->
        <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
            <Setter Property="Foreground" Value="Orange"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#FFBCBCBC"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="TemplateRoot" Background="Transparent">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="12"/>
                            <Rectangle x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left" Background="Transparent">
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="12" RadiusY="12"/>
                                <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" RadiusX="12" RadiusY="12">
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Control.Foreground">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="#FFFEB329" Offset="0.0"/>
                        <!--<GradientStop Color="Orange" Offset="0.3"/>
                        <GradientStop Color="DarkOrange" Offset="0.6"/>-->
                        <GradientStop Color="#FFFF5014" Offset="1.0"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!--Custom Scrollbar Style-->
        <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
        <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#FFA500" />
        <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />
        <!--Thumb = Steuerelement, das vom Benutzer gezogen werden kann-->
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"  Width="8" Margin="8,0,-2,0"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--ScrollBar = Steuerelement, das eine Schiebeleiste mit einem verschiebbaren Thumb bereitstellt-->
        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid Background="Transparent">
                <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="{StaticResource HorizontalNormalBrush}" BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid>
                <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </ControlTemplate>
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="25"/>
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Application.Resources>
</Application>
